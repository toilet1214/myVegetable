@model IEnumerable<prjVegetable.Models.TProduct>

@{
    ViewData["Title"] = "ProductList";
    Layout = "~/Views/Shared/_ProductLayout.cshtml";
    
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LEGO_HERE 首頁</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.3/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link href="https://fonts.googleapis.com/css2?family=LXGW+WenKai+Mono+TC&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/css/site.css">
    <style>
        .imgicon {
            border-radius: 50%;
            color: white;
            background-color: rgb(83, 178, 233);
            /* 過渡 動態效果*/
            transition: all 0.3s;
        }
    </style>
</head>

<body>

    @{
        int count = 0;
    }

    <!--產品側邊欄 start -->
    <div class="bg-secondary">
        <div class="container mt-5 py-2 w-50 fs-5 ">
            <div class="row">
                <div class="imgicon col-12 col-md-2 me-2 ">
                    <img src="~/Images/icon玉米1.png" alt="" class="w-100" />
                    <div class="mt-1 d-flex justify-content-center align-items-end">
                        <p>葉菜</p>
                    </div>
                </div>
                <div class="imgicon col-12 col-md-2 me-2">
                    <img src="~/Images/icon玉米1.png" alt="" class="w-100" />
                    <div class="mt-1 d-flex justify-content-center align-items-end">
                        <p>根莖</p>
                    </div>
                </div>
                <div class="imgicon col-12 col-md-2 me-2">
                    <img src="~/Images/icon玉米1.png" alt="" class="w-100" />
                    <div class="mt-1 d-flex justify-content-center align-items-end">
                        <p>蕈菇</p>
                    </div>
                </div>
                <div class="imgicon col-12 col-md-2 me-2">
                    <img src="~/Images/icon玉米1.png" alt="" class="w-100" />
                    <div class="mt-1 d-flex justify-content-center align-items-end">
                        <p>水果</p>
                    </div>
                </div>
                <div class="imgicon col-12 col-md-2 me-2">
                    <img src="~/Images/icon玉米1.png" alt="" class="w-100" />
                    <div class="mt-1 d-flex justify-content-center align-items-end">
                        <p>蔬菜箱</p>
                    </div>
                </div>

            </div>
        </div>

    </div>

    <!-- 篩選價格 start -->
    <div class="container d-flex flex-column  margin-top: auto ">

        <div class="dropdown position-absolute top-1 end-0">
            <button class="btn dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                篩選價格
            </button>
            <ul class="dropdown-menu" style="width: 100px;" aria-labelledby="dropdownMenuButton1">
                <li>
                    <a class="dropdown-item" href="#"></a>
                    <div class="modal-body">
                        <p>建議區間: NT$300 ~ NT$700</p>
                        <div class="range_container">
                            <div class="sliders_control">
                                <input id="fromSlider" type="range" value="300" min="0" max="1000" />
                                <input id="toSlider" type="range" value="700" min="0" max="1000" />
                            </div>
                            <div class="form_control">
                                <div class="form_control_container">
                                    <div class="form_control_container__time">最低$$</div>
                                    <input class="form_control_container__time__input" type="number" id="fromInput" value="300" min="0" max="1000" />
                                </div>
                                <div class="form_control_container">
                                    <div class="form_control_container__time">最高$$</div>
                                    <input class="form_control_container__time__input" type="number" id="toInput" value="700" min="0" max="1000" />

                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end ">
                        <button id="applyFilter" class="btn btn-secondary btn-sm me-3 ms-3 ">確定</button>
                    </div>

                </li>
            </ul>

        </div>

        <!-- 產品列表 start -->
        <div class="row row-cols-1 row-cols-md-5 g-4 my-4 me-5 ms-5 hot-product-card">

            @foreach (var item in Model)
            {
                count++;
                bool isSoldOut = item.FProductQuantity == 0;  // 檢查產品是否售完


                <div class="col">
                    <a href="" class="text-decoration-none">

                        <div class="card h-100 shadow-sm d-flex flex-column @((isSoldOut) ? "sold-out" : "")">
                            @if (isSoldOut)
                            {
                                <div class="position-absolute bottom-0 end-0 bg-dark text-light fw-bold p-2 m-3 opacity-75" style="border-radius: 5px;">
                                    售完
                                </div>
                                <div class="card-overlay position-absolute top-0 start-0 w-100 h-100 bg-dark opacity-50"></div>
                            }


                            <div class="position-absolute bg-warning text-danger fw-bold p-3 start-0 top-0">人氣1</div>
                            @* 判斷售完產品是否顯示灰色圖片 *@
                            @* ~/Img/@Html.DisplayFor(modelItem => item.FImgName) *@
                            <img src="~/Images/@Html.DisplayFor(modelItem => item.FImgName)" class="card-img-top img-fluid @((isSoldOut) ? "sold-out-img" : "")" alt="Image">
                            <div class="card-body d-flex flex-column justify-content-center align-items-center">
                                <h5 class="card-title">@Html.DisplayFor(modelItem => item.FProductName)</h5>
                                <p class="card-text">【@Html.DisplayFor(modelItem => item.FProductDescription)】《宅配含運》</p>
                                <p class="card-text">NT @Html.DisplayFor(modelItem => item.FProductPrice)</p>
                                <div class="d-flex">
                                    <button class="btn"><i class="bi bi-heart"></i></button>
                                    <button class="btn @((isSoldOut) ? "disabled" : "")"><i class="bi bi-cart"></i>加入購物車</button>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
            }
        </div>

        <!-- 頁碼 start -->
        <div class="row ">
            <div class=" col-12 d-flex align-items-end justify-content-center">
                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-end">
                        <li class="page-item">
                            <a class="page-link" href="#" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        <li class="page-item active"><a class="page-link" href="#">1</a></li>
                        <li class="page-item"><a class="page-link" href="#">2</a></li>
                        <li class="page-item"><a class="page-link" href="#">3</a></li>
                        <li class="page-item">
                            <a class="page-link" href="#" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>

   

    @section Scripts
    {

        <script>
            $(function () {

                function controlFromInput(fromSlider, fromInput, toInput, controlSlider) {
                    const [from, to] = getParsed(fromInput, toInput);
                    fillSlider(fromInput, toInput, '#C6C6C6', '#25daa5', controlSlider);
                    if (from > to) {
                        fromSlider.value = to;
                        fromInput.value = to;
                    } else {
                        fromSlider.value = from;
                    }
                }

                function controlToInput(toSlider, fromInput, toInput, controlSlider) {
                    const [from, to] = getParsed(fromInput, toInput);
                    fillSlider(fromInput, toInput, '#C6C6C6', '#25daa5', controlSlider);
                    setToggleAccessible(toInput);
                    if (from <= to) {
                        toSlider.value = to;
                        toInput.value = to;
                    } else {
                        toInput.value = from;
                    }
                }

                function controlFromSlider(fromSlider, toSlider, fromInput) {
                    const [from, to] = getParsed(fromSlider, toSlider);
                    fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
                    if (from > to) {
                        fromSlider.value = to;
                        fromInput.value = to;
                    } else {
                        fromInput.value = from;
                    }
                }

                function controlToSlider(fromSlider, toSlider, toInput) {
                    const [from, to] = getParsed(fromSlider, toSlider);
                    fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
                    setToggleAccessible(toSlider);
                    if (from <= to) {
                        toSlider.value = to;
                        toInput.value = to;
                    } else {
                        toInput.value = from;
                        toSlider.value = from;
                    }
                }

                function getParsed(currentFrom, currentTo) {
                    const from = parseInt(currentFrom.value, 10);
                    const to = parseInt(currentTo.value, 10);
                    return [from, to];
                }

                function fillSlider(from, to, sliderColor, rangeColor, controlSlider) {
                    const rangeDistance = to.max - to.min;
                    const fromPosition = from.value - to.min;
                    const toPosition = to.value - to.min;
                    controlSlider.style.background = `linear-gradient(
                                      to right,
                                      ${sliderColor} 0%,
                                      ${sliderColor} ${(fromPosition) / (rangeDistance) * 100}%,
                                      ${rangeColor} ${((fromPosition) / (rangeDistance)) * 100}%,
                                      ${rangeColor} ${(toPosition) / (rangeDistance) * 100}%,
                                      ${sliderColor} ${(toPosition) / (rangeDistance) * 100}%,
                                      ${sliderColor} 100%)`;
                }

                function setToggleAccessible(currentTarget) {
                    const toSlider = document.querySelector('#toSlider');
                    if (Number(currentTarget.value) <= 0) {
                        toSlider.style.zIndex = 2;
                    } else {
                        toSlider.style.zIndex = 0;
                    }
                }

                const fromSlider = document.querySelector('#fromSlider');
                const toSlider = document.querySelector('#toSlider');
                const fromInput = document.querySelector('#fromInput');
                const toInput = document.querySelector('#toInput');
                fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
                setToggleAccessible(toSlider);

                fromSlider.oninput = () => controlFromSlider(fromSlider, toSlider, fromInput);
                toSlider.oninput = () => controlToSlider(fromSlider, toSlider, toInput);
                fromInput.oninput = () => controlFromInput(fromSlider, fromInput, toInput, toSlider);
                toInput.oninput = () => controlToInput(toSlider, fromInput, toInput, toSlider);



            });//end function

        </script>
    }

</body>
