@model IEnumerable<prjVegetable.Models.CProductWrap>
@using X.PagedList.Mvc.Core;
@using X.PagedList;


@{
    ViewData["Title"] = "ProductList";

}




<style>

    .dropdown-menu {
        margin: 0 !important;
        padding: 0 !important;
    }


    /* 篩選分類 */
    .seven-cols .col-md-1 {
        width: 14.2857%;
    }

    .imgicon {
        /* border-radius: 50%; */
        color: white;
        background-color: #8D8266;
        transition: all 0.3s;
    }

        .imgicon i {
            font-size: 2rem;
        }

        .imgicon:hover {
            background-color: rgb(174, 146, 105);
        }


    .hidden-launch-date {
        display: none; /* 隱藏元素 */
    }



    /* 篩選價格 */
    #dropdownMenuButton1 {
        white-space: nowrap;
        padding: 10px 10px;
        font-size: 16px;
        width: auto;
    }

    #collapseExample {
        position: absolute;
        top: 42px;
        right: 0px;
        z-index: 1050;
        width: 300px;
    }

        #collapseExample .modal-body {
            padding: 5px 5px;
            margin: 10px;
        }

    .lightbox-close {
        color: black;
        text-shadow: 1px 1px 1px #333;
        font-size: 30px;
        position: absolute;
        top: 1px;
        right: 0px;
        margin: 10px;
        cursor: pointer;
    }

    .range_container {
        display: flex;
        flex-direction: column;
        width: 80%;
        margin-top: 30px;
    }

    .sliders_control {
        position: relative;
        min-height: 30px;
    }

    .form_control {
        position: relative;
        display: flex;
        justify-content: space-between;
        font-size: 24px;
        color: #635a5a;
    }

    input[type=range]::-webkit-slider-thumb {
        -webkit-appearance: none;
        pointer-events: all;
        width: 24px;
        height: 24px;
        background-color: #fff;
        border-radius: 50%;
        box-shadow: 0 0 0 1px #C6C6C6;
        cursor: pointer;
    }

    input[type=range]::-moz-range-thumb {
        -webkit-appearance: none;
        pointer-events: all;
        width: 24px;
        height: 24px;
        background-color: #fff;
        border-radius: 50%;
        box-shadow: 0 0 0 1px #C6C6C6;
        cursor: pointer;
    }

    input[type=range]::-webkit-slider-thumb:hover {
        background: #f7f7f7;
    }

    input[type=range]::-webkit-slider-thumb:active {
        box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
        -webkit-box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
    }

    input[type="number"] {
        color: #8a8383;
        width: 70px;
        height: 30px;
        font-size: 20px;
        border: none;
    }

    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        opacity: 1;
    }

    input[type="range"] {
        -webkit-appearance: none;
        appearance: none;
        height: 4px;
        width: 100%;
        position: absolute;
        background-color: #C6C6C6;
        pointer-events: none;
    }

    #fromSlider {
        height: 0;
        z-index: 1;
    }


    /* 商品card */
    .card-title {
        font-size: 20px !important;
    }

    /* 商品card  顯示字數*/
    .card-text {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
    }

    .card-img-top {
        object-fit: contain;
        width: 100%;
        height: auto;
    }

    .btnicon {
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 50%;
        width: 30px; /* 控制按鈕的大小 */
        height: 30px; /* 控制按鈕的大小 */
        border: 2px solid #ddd; /* 加上邊框 */
        background-color: #fff; /* 背景顏色 */
        font-size: 1rem; /* 調整 icon 大小 */
        transition: background-color 0.3s ease, border-color 0.3s ease;
    }

        .btnicon:hover {
            background-color: lightpink; /* 滑鼠 hover 顏色 */
            border-color: lightpink; /* 滑鼠 hover 邊框顏色 */
        }



</style>

@{
    int count = 0;
}

<!--產品分類 start -->
<div class="bg-primary">
    <div class="container mt-2 fs-5">
        <div class="row seven-cols">
            <button type="button" class="imgicon  col-12 col-md-1 d-flex align-items-center justify-content-center" style="border: none;" data-category="" id="btnAll">
                <i class="my-3 fi fi-rr-box"></i>
                <p class="mx-1 my-2" style="white-space: nowrap;">全部</p>
            </button>
            <button type="button" class="imgicon   col-12 col-md-1 d-flex align-items-center justify-content-center" style="border: none;" data-category="根莖" id="btn根莖">
                <i class="my-3 fi fi-rr-carrot"></i>
                <p class="mx-1 my-2" style="white-space: nowrap;">根莖</p>
            </button>
            <button type="button" class="imgicon   col-12 col-md-1 d-flex align-items-center justify-content-center" style="border: none;" data-category="葉菜" id="btn葉菜">
                <i class="my-3 fi fi-rr-leafy-green"></i>
                <p class="mx-1 my-2" style="white-space: nowrap;">葉菜</p>
            </button>
            <button type="button" class="imgicon   col-12 col-md-1 d-flex align-items-center justify-content-center" style="border: none;" data-category="水果" id="btn水果">
                <i class="my-3 fi fi-rr-apple-whole"></i>
                <p class="mx-1 my-2" style="white-space: nowrap;">水果</p>
            </button>
            <button type="button" class="imgicon   col-12 col-md-1 d-flex align-items-center justify-content-center" style="border: none;" data-category="蕈菇" id="btn蕈菇">
                <i class="my-3 fi fi-rr-mushroom-alt"></i>
                <p class="mx-1 my-2" style="white-space: nowrap;">蕈菇</p>
            </button>
            <button type="button" class="imgicon   col-12 col-md-1 d-flex align-items-center justify-content-center" style="border: none;" data-category="蔬菜箱" id="btn蔬菜箱">
                <i class="my-3 fi fi-rr-salad"></i>
                <p class="mx-1 my-2" style="white-space: nowrap;">蔬菜箱</p>
            </button>
            <button type="button" class="imgicon   col-12 col-md-1 d-flex align-items-center justify-content-center" style="border: none;" data-category="其他" id="btn其他">
                <i class="my-3 fi fi-rr-lettuce"></i>
                <p class="mx-1 my-2" style="white-space: nowrap;">其他</p>
            </button>
        </div>
    </div>
</div>
<div class="container ">
    <!-- 麵包屑 start -->
    <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="breadcrumb m-1">
            <li class="breadcrumb-item">
                <a href="@Url.Action("Index", "Home")">首頁</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">
                <a href="@Url.Action("ProductList", "Product")">產品列表</a>
            </li>
            @if (ViewBag.Category != null && ViewBag.Category != "產品列表")
            {
                <li class="breadcrumb-item active" aria-current="page">
                    <a>@ViewBag.Category</a>
                </li>
            }
        </ol>
    </nav>


</div>

<div class="container text-center my-3">
    <div class="row">
        <div class="col-12 col-md-6 offset-md-6">
            <div class="row">
                <!-- 搜尋 start -->
                <div class="col-12 col-md-6">
                    @using (Html.BeginForm("ProductList", "Product", FormMethod.Get, new { id = "filterForm1" }))
                    {
                        @Html.TextBox("keyword", "")
                        <button type="submit" class="btn btn-link" style="border: none;">
                            <i class="bi bi-search"></i>
                        </button>
                    }

                </div>
                <!--排序-->
                <div class="col-12 col-md-3">
                    <form method="get" action="@Url.Action("ProductList", "Product")" id="sortForm">
                        <input type="hidden" name="category" value="@ViewData["Category"]" />
                        <select id="sortOrder" name="sortOrder" class="form-select" onchange="this.form.submit()">
                            <option value="">預設排序</option>
                            <option value="price_asc">價格由小到大</option>
                            <option value="price_desc">價格由大到小</option>
                            <option value="publish_date_asc">上架日期由舊到新</option>
                            <option value="publish_date_desc">上架日期由新到舊</option>
                        </select>
                    </form>
                </div>
                <!-- 篩選價格 start -->
                <div class="col-12 col-md-3 dropdown">
                    @using (Html.BeginForm("ProductList", "Product", FormMethod.Get, new { id = "filterForm2" }))
                    {
                        <input type="hidden" id="minPriceInput" name="MinPrice" />
                        <input type="hidden" id="maxPriceInput" name="MaxPrice" />
                        <input type="hidden" id="sortOrderInput" name="sortOrder" value="@ViewData["SortOrder"]" />
                        <p>
                            <button class="btn btn-primary position-absolute top-0 end-0" type="button" id="dropdownMenuButton1" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                                篩選價格
                            </button>
                        </p>
                        <div class="collapse " id="collapseExample">
                            <div class="card card-body ">
                                <a class="dropdown-item " href="#"></a>
                                <span class="lightbox-close">&times;</span>
                                <div class="modal-body">
                                    <p>建議區間: NT$100 ~ NT$500</p>
                                    <div class="range_container">
                                        <div class="sliders_control">
                                            <input id="fromSlider" type="range" value="100" min="0" max="1000" step="10" />
                                            <input id="toSlider" type="range" value="500" min="0" max="1000" step="10" />
                                        </div>
                                        <div class="form_control">
                                            <div class="form_control_container">
                                                <div class="form_control_container__time">最低$$</div>
                                                <input class="form_control_container__time__input" type="number" id="fromInput" value="100" min="0" max="1000" step="10" />
                                            </div>
                                            <div class="form_control_container">
                                                <div class="form_control_container__time">最高$$</div>
                                                <input class="form_control_container__time__input" type="number" id="toInput" value="500" min="0" max="1000" step="10" />
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="d-flex justify-content-end ">
                                    <button id="applyFilter" class="btn btn-secondary btn-sm me-3 ms-3 ">確定</button>
                                </div>
                            </div>
                        </div>

                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 產品列表 start -->
<div class="container">
    <div class="row">
        <div class="col-12" id="card">
            <div class="row row-cols-1 row-cols-md-5  my-4 mx-5 " id="product-list">
                @foreach (var item in Model)
                {
                    count++;
                    <div class="col product-item mb-4" data-publish-date="@item.FLaunchAt">
                        <a href="@Url.Action("ProductItem", "Product", new { id = item.FId })" class="text-decoration-none">

                            <div class="card h-80 shadow-sm d-flex flex-column ">
                                @* <div class="position-absolute bg-warning text-danger fw-bold p-3 start-0 top-0">人氣1</div> *@
                                @if (item.IsPopular)
                                {
                                    <div class="position-absolute bg-danger text-white fw-bold p-2 start-0 top-0 rounded-end">
                                        <i class="bi bi-fire text-warning"></i>熱銷中
                                    </div>
                                }
                                @* ~/Img/@Html.DisplayFor(modelItem => item.FImgName) *@
                                @* <img src="~/Images/@Html.DisplayFor(modelItem => item.FImgName)" class="card-img-top img-fluid" alt="Image"> *@
                                <img src="~/Images/@(string.IsNullOrEmpty(item.FImgName) ? "NoImage.jpg" : item.FImgName)" class="card-img-top img-fluid" alt="Image">                                <div class="card-body d-flex align-items-center">
                                    <p class="card-title m-0">@Html.DisplayFor(modelItem => item.FName)</p>
                                    <p class="card-text m-0">【@Html.DisplayFor(modelItem => item.FDescription)】</p>
                                    <div class="d-flex justify-content-between w-100">
                                        <span class="card-text">NT @Html.DisplayFor(modelItem => item.FPrice)</span>
                                        <div class="d-flex">
                                            <button class="btn heartButton p-0 btnicon" data-productid="@item.FId">
                                                <i class="heart-icon @((item.IsFavorite) ? "bi-heart-fill text-danger" : "bi-heart")"></i>
                                            </button>
                                            <button class="btn addToCartButtonList p-0 btnicon" data-productid="@item.FId">
                                                <i class="bi bi-cart"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <p class="card-text"><span class="hidden-launch-date">@Html.DisplayFor(modelItem => item.FLaunchAt)</span></p>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- 分頁控制 -->
<div class="container">
    <div class="d-flex justify-content-center">
        @if ((int)ViewData["TotalPages"] > 1)
        {
            <div class="container my-auto">
                <div class="d-flex align-items-end justify-content-center mt-3">
                    <nav aria-label="Page navigation example">
                        <ul class="pagination justify-content-center" id="pagination">
                            <!-- 上一頁 -->
                            <li class="page-item @(Convert.ToInt32(ViewData["Page"]) != 1 ? "" : "disabled")">
                                <a class="page-link" href="@Url.Action("ProductList", new { category = ViewData["Category"], keyword = ViewData["Keyword"], page = Math.Max(1, Convert.ToInt32(ViewData["Page"]) - 1), MinPrice = ViewData["MinPrice"], MaxPrice = ViewData["MaxPrice"] , sortOrder = ViewData["SortOrder"]})" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>

                            <!-- 分頁頁碼 -->
                            @for (int i = 1; i <= (int)ViewData["TotalPages"]; i++)
                            {
                                <li class="page-item @(i == Convert.ToInt32(ViewData["Page"]) ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("ProductList", new { category = ViewData["Category"], keyword = ViewData["Keyword"], page = i, MinPrice = ViewData["MinPrice"], MaxPrice = ViewData["MaxPrice"], sortOrder = ViewData["SortOrder"] })">@i</a>
                                </li>
                            }

                            <!-- 下一頁 -->
                            <li class="page-item @(Convert.ToInt32(ViewData["Page"]) != Convert.ToInt32(ViewData["TotalPages"]) ? "" : "disabled")">
                                <a class="page-link" href="@Url.Action("ProductList", new { category = ViewData["Category"], keyword = ViewData["Keyword"], page = Math.Min(Convert.ToInt32(ViewData["TotalPages"]), Convert.ToInt32(ViewData["Page"]) + 1), MinPrice = ViewData["MinPrice"], MaxPrice = ViewData["MaxPrice"] , sortOrder = ViewData["SortOrder"]})" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        }
    </div>
</div>











@section Scripts
{

    <script>
        const products1 = @Html.Raw(Json.Serialize(ViewBag.Products));

        $(function () {

            // 篩選種類start //
            function submitCategory(button) {
                // 獲取按鈕的 data-category 屬性值
                var category = button.getAttribute('data-category') || "所有產品"; // 預設值

                // 將選中的 category 設置到隱藏輸入框
                var categoryInput = document.getElementById('categoryInput');
                if (categoryInput) {
                    categoryInput.value = category;
                } else {
                    console.error('隱藏輸入框 categoryInput 不存在！');
                    return;
                }

                // 提交表單
                var form = document.querySelector("form");
                if (form) {
                    form.submit();
                } else {
                    console.error('表單不存在！');
                }

                // 當用戶選擇排序方式時，更新並提交表單
                var form =document.querySelector("form");
                    if (form) {
                        form.submit();
                    }else{
                        console.error("表單不存在！");
                    }

            }



            // 停止按鈕的默認提交行為，並用 JavaScript 提交
            $(function () {
                // 處理分類按鈕點擊
                $('.imgicon').click(function () {
                    const category = $(this).data('category');
                    const currentSort = $('#sortOrder').val() || '';

                    // 使用 AJAX 或直接導航到新的 URL
                    window.location.href = `/Product/ProductList?category=${category}&sortOrder=${currentSort}`;
                });
            });

            // $('.imgicon').on('click', function (event) {
            //     event.preventDefault();  // 阻止表單提交
            //     submitCategory(this);  // 呼叫 submitCategory
            // });




            // collapse隱藏/顯示
            let isVisible = false;
            $('#dropdownMenuButton1, .lightbox-close').on('click', function () {
                if (this.id === 'dropdownMenuButton1') {
                    if (isVisible) {
                        $('#collapseExample').hide();
                    } else {
                        $('#collapseExample').show();
                    }
                    isVisible = !isVisible;
                } else if (this.classList.contains('lightbox-close')) {
                    $('#collapseExample').fadeOut();
                    isVisible = false;
                }
            });


            // 篩選價格Slider Range start//
            function controlFromInput(fromSlider, fromInput, toInput, controlSlider) {
                const [from, to] = getParsed(fromInput, toInput);
                fillSlider(fromInput, toInput, '#C6C6C6', '#25daa5', controlSlider);
                if (from > to) {
                    fromSlider.value = to;
                    fromInput.value = to;
                } else {
                    fromSlider.value = from;
                }
            }

            function controlToInput(toSlider, fromInput, toInput, controlSlider) {
                const [from, to] = getParsed(fromInput, toInput);
                fillSlider(fromInput, toInput, '#C6C6C6', '#25daa5', controlSlider);
                setToggleAccessible(toInput);
                if (from <= to) {
                    toSlider.value = to;
                    toInput.value = to;
                } else {
                    toInput.value = from;
                }
            }

            function controlFromSlider(fromSlider, toSlider, fromInput) {
                const [from, to] = getParsed(fromSlider, toSlider);
                fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
                if (from > to) {
                    fromSlider.value = to;
                    fromInput.value = to;
                } else {
                    fromInput.value = from;
                }
            }

            function controlToSlider(fromSlider, toSlider, toInput) {
                const [from, to] = getParsed(fromSlider, toSlider);
                fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
                setToggleAccessible(toSlider);
                if (from <= to) {
                    toSlider.value = to;
                    toInput.value = to;
                } else {
                    toInput.value = from;
                    toSlider.value = from;
                }
            }

            function getParsed(currentFrom, currentTo) {
                const from = parseInt(currentFrom.value, 10);
                const to = parseInt(currentTo.value, 10);
                return [from, to];
            }

            function fillSlider(from, to, sliderColor, rangeColor, controlSlider) {
                const rangeDistance = to.max - to.min;
                const fromPosition = from.value - to.min;
                const toPosition = to.value - to.min;
                controlSlider.style.background = `linear-gradient(
                                                to right,
                                                ${sliderColor} 0%,
                                                ${sliderColor} ${(fromPosition) / (rangeDistance) * 100}%,
                                                ${rangeColor} ${((fromPosition) / (rangeDistance)) * 100}%,
                                                ${rangeColor} ${(toPosition) / (rangeDistance) * 100}%,
                                                ${sliderColor} ${(toPosition) / (rangeDistance) * 100}%,
                                                ${sliderColor} 100%)`;
            }

            function setToggleAccessible(currentTarget) {
                const toSlider = document.querySelector('#toSlider');
                if (Number(currentTarget.value) <= 0) {
                    toSlider.style.zIndex = 2;
                } else {
                    toSlider.style.zIndex = 0;
                }
            }

            const fromSlider = document.querySelector('#fromSlider');
            const toSlider = document.querySelector('#toSlider');
            const fromInput = document.querySelector('#fromInput');
            const toInput = document.querySelector('#toInput');
            fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
            setToggleAccessible(toSlider);

            fromSlider.oninput = () => controlFromSlider(fromSlider, toSlider, fromInput);
            toSlider.oninput = () => controlToSlider(fromSlider, toSlider, toInput);
            fromInput.oninput = () => controlFromInput(fromSlider, fromInput, toInput, toSlider);
            toInput.oninput = () => controlToInput(toSlider, fromInput, toInput, toSlider);
            // 篩選價格Slider Range end //



            // 用來判斷是否執行過排序或篩選
            let isSorting = false;
            let isFiltering = false;

            // 先篩選再排序
            $('#applyFilter').on('click', function () {
                const minPrice = parseInt(document.getElementById('fromSlider').value);
                const maxPrice = parseInt(document.getElementById('toSlider').value);

                $('#minPriceInput').val(minPrice);
                $('#maxPriceInput').val(maxPrice);

                isFiltering = true;

                var currentSortOrder = $('#sortOrderInput').val();
                $('#sortOrderInput').val(currentSortOrder);

                $('#filterForm2').submit();
            });

            // 先排序再篩選
            $('#sortOrder').on('change', function () {
                const sortOrder = $(this).val();

                isSorting = true;

                $('#sortOrderInput').val(sortOrder);

                if (isFiltering) {
                    $('#filterForm2').submit();
                }
            });



            //我的最愛
            $(".heartButton").click(function (event) {
                event.stopPropagation();

                var heartIcon = $(this).find(".heart-icon");
                var productId = $(this).data("productid");
                var isFavorite = heartIcon.hasClass("bi-heart-fill");
                var currentUrl = window.location.href;  // 獲取當前頁面的 URL

                // 檢查是否已登入
                $.ajax({
                    url: '@Url.Action("CheckLogin", "Product")',  // 檢查登入狀態的 API
                    type: 'GET',
                    success: function (response) {
                        if (!response.isLoggedIn) {
                            // 如果未登入，顯示登入 modal 並傳遞當前頁面 URL
                            $('#LoginModal').modal('show');
                            $("#LoginModal").on('shown.bs.modal', function () {
                                $('input[name="returnUrl"]').val(currentUrl);  // 將當前頁面 URL 填入 returnUrl 欄位
                            });
                        } else {
                            // 如果已登入，執行收藏的操作
                            $.ajax({
                                url: '@Url.Action("AddToFavorites", "Product")',  // 呼叫後端處理加入或取消收藏
                                type: 'POST',
                                data: { productId: productId, isFavorite: !isFavorite },
                                success: function (response) {
                                    console.log(response);

                                    if (response.success) {
                                        if (response.isFavorite) {
                                            heartIcon.removeClass("bi-heart").addClass("bi-heart-fill text-danger");
                                        } else {
                                            heartIcon.removeClass("bi-heart-fill text-danger").addClass("bi-heart");
                                        }
                                    } else {
                                        alert('操作失敗');
                                    }
                                },
                                error: function () {
                                    alert('出現錯誤');
                                }
                            });
                        }
                    },
                    error: function () {
                        alert('檢查登入狀態時出現錯誤');
                    }
                });

                event.preventDefault();
            });


            //加入購物車
            $(".addToCartButtonList").click(function (event) {
                event.stopPropagation();

                var button = $(this);
                var productId = button.data("productid");
                var currentUrl = window.location.href;

                $.ajax({
                    url: '@Url.Action("CheckLogin", "Product")',
                    type: 'GET',
                    success: function (response) {
                        if (!response.isLoggedIn) {
                            $('#LoginModal').modal('show');
                            $("#LoginModal").on('shown.bs.modal', function () {
                                $('input[name="returnUrl"]').val(currentUrl);
                            });
                        } else {

                            // 執行加入購物車的操作
                            $.ajax({
                                url: '@Url.Action("AddToCart", "Product")',
                                type: 'POST',
                                data: { productId: productId },
                                success: function (response) {
                                    if (response.success) {
                                        alert("成功加入購物車");
                                    } else {
                                        alert('操作失敗');
                                    }
                                },
                                error: function () {
                                    alert('出現錯誤');
                                }
                            });
                        }
                    },
                    error: function () {
                        alert('檢查登入狀態時出現錯誤');
                    }
                });
                event.preventDefault();
            });


            //排序










        });//end function

    </script>
}