@model IEnumerable<prjVegetable.Models.CProductWrap>

@{
    ViewData["Title"] = "ProductList";


}

<style>

    .dropdown-menu {
    margin: 0 !important; /* 去除外邊距 */
    padding: 0 !important; /* 去除內邊距 */
    }


    .imgicon {
    border-radius: 50%;
    color: white;
    background-color: #8D8266;
    transition: all 0.3s;
    }

    .imgicon:hover {
    background-color: rgb(174, 146, 105);
    width: 17%;
    }



    .range_container {
    display: flex;
    flex-direction: column;
    width: 80%;
    margin-top: 30px;
    }

    .sliders_control {
    position: relative;
    min-height: 30px;
    }

    .form_control {
    position: relative;
    display: flex;
    justify-content: space-between;
    font-size: 24px;
    color: #635a5a;
    }

    input[type=range]::-webkit-slider-thumb {
    -webkit-appearance: none;
    pointer-events: all;
    width: 24px;
    height: 24px;
    background-color: #fff;
    border-radius: 50%;
    box-shadow: 0 0 0 1px #C6C6C6;
    cursor: pointer;
    }

    input[type=range]::-moz-range-thumb {
    -webkit-appearance: none;
    pointer-events: all;
    width: 24px;
    height: 24px;
    background-color: #fff;
    border-radius: 50%;
    box-shadow: 0 0 0 1px #C6C6C6;
    cursor: pointer;
    }

    input[type=range]::-webkit-slider-thumb:hover {
    background: #f7f7f7;
    }

    input[type=range]::-webkit-slider-thumb:active {
    box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
    -webkit-box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
    }

    input[type="number"] {
    color: #8a8383;
    width: 70px;
    height: 30px;
    font-size: 20px;
    border: none;
    }

    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
    opacity: 1;
    }

    input[type="range"] {
    -webkit-appearance: none;
    appearance: none;
    height: 4px;
    width: 100%;
    position: absolute;
    background-color: #C6C6C6;
    pointer-events: none;
    }

    #fromSlider {
    height: 0;
    z-index: 1;
    }
</style>

@{
    int count = 0;
}


<!--產品分類 start -->
@using (Html.BeginForm("ProductList", "Product", FormMethod.Get))
{
    <input type="hidden" name="category" id="categoryInput" />
    <div class="bg-primary">
        <div class="container mt-5 py-2 fs-5 w-50">
            <div class="row">
                <button class="imgicon col-12 col-md-2 me-1 " style="border: none;" data-category="根莖" onclick="submitCategory(this)">
                    <img src="~/Images/icon玉米1.png" alt="" class="w-100" />
                    <div class="mt-1 d-flex justify-content-center align-items-end">
                        <p>根莖</p>
                    </div>
                </button>
                <button class="imgicon col-12 col-md-2 me-1 " style="border: none;" data-category="葉菜" onclick="submitCategory(this)">
                    <img src="~/Images/icon玉米1.png" alt="" class="w-100" />
                    <div class="mt-1 d-flex justify-content-center align-items-end">
                        <p>葉菜</p>
                    </div>
                </button>
                <button class="imgicon col-12 col-md-2 me-1 " style="border: none;" data-category="水果" onclick="submitCategory(this)">
                    <img src="~/Images/icon玉米1.png" alt="" class="w-100" />
                    <div class="mt-1 d-flex justify-content-center align-items-end">
                        <p>水果</p>
                    </div>
                </button>
                <button class="imgicon col-12 col-md-2 me-1 " style="border: none;" data-category="蕈菇" onclick="submitCategory(this)">
                    <img src="~/Images/icon玉米1.png" alt="" class="w-100" />
                    <div class="mt-1 d-flex justify-content-center align-items-end">
                        <p>蕈菇</p>
                    </div>
                </button>
                <button class="imgicon col-12 col-md-2 me-1" style="border: none;" data-category="蔬菜箱" onclick="submitCategory(this)">
                    <img src="~/Images/icon玉米1.png" alt="" class="w-100" />
                    <div class="mt-1 d-flex justify-content-center align-items-end">
                        <p>蔬菜箱</p>
                    </div>
                </button>
            </div>
        </div>
    </div>
}




<div class="container d-flex flex-column  margin-top: auto ">

    @using (Html.BeginForm("ProductList", "Product", FormMethod.Get, new { id = "filterForm" }))
    {
        <!-- 篩選價格 start -->
        <input type="hidden" id="minPriceInput" name="MinPrice" />
        <input type="hidden" id="maxPriceInput" name="MaxPrice" />
        <div class="dropdown position-absolute top-1 end-0">
            <button class="btn dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                篩選價格
            </button>
            <ul class="dropdown-menu" style="width: 450px;" aria-labelledby="dropdownMenuButton1">
                <li>
                    <a class="dropdown-item" href="#"></a>
                    <div class="modal-body">
                        <p>建議區間: NT$300 ~ NT$700</p>
                        <div class="range_container">
                            <div class="sliders_control">
                                <input id="fromSlider" type="range" value="300" min="0" max="1000" />
                                <input id="toSlider" type="range" value="700" min="0" max="1000" />
                            </div>
                            <div class="form_control">
                                <div class="form_control_container">
                                    <div class="form_control_container__time">最低$$</div>
                                    <input class="form_control_container__time__input" type="number" id="fromInput" value="300" min="0" max="1000" step="10" />
                                </div>
                                <div class="form_control_container">
                                    <div class="form_control_container__time">最高$$</div>
                                    <input class="form_control_container__time__input" type="number" id="toInput" value="700" min="0" max="1000" step="10" />
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end ">
                        <button id="applyFilter" class="btn btn-secondary btn-sm me-3 ms-3 ">確定</button>
                    </div>

                </li>
            </ul>
        </div>
    }

    <!-- 產品列表 start -->
    <div class="col-12">

        <div class="row row-cols-1 row-cols-md-5  my-4 mx-5 hot-product-card" id=" product-list">


            @foreach (var item in Model)
            {
                count++;
                bool isSoldOut = item.FQuantity == 0;  // 檢查產品是否售完


                <div class="col">
                    <a href="@Url.Action("ProductItem", "Product", new { id = item.FId })" class="text-decoration-none">

                        <div class="card h-100 shadow-sm d-flex flex-column @((isSoldOut) ? "sold-out" : "")">

                            @if (isSoldOut)
                            {
                                <div class="position-absolute bottom-0 end-0 bg-dark text-light fw-bold p-2 m-3 opacity-75" style="border-radius: 5px;">
                                    售完
                                </div>
                                <div class="card-overlay position-absolute top-0 start-0 w-100 h-100 bg-dark opacity-50"></div>
                            }


                            <div class="position-absolute bg-warning text-danger fw-bold p-3 start-0 top-0">人氣1</div>
                            @* 判斷售完產品是否顯示灰色圖片 *@
                            @* ~/Img/@Html.DisplayFor(modelItem => item.FImgName) *@
                            <img src="~/Images/@Html.DisplayFor(modelItem => item.FImgName)" class="card-img-top img-fluid @((isSoldOut) ? "sold-out-img" : "")" alt="Image">
                            <div class="card-body d-flex flex-column justify-content-center align-items-center">
                                <h5 class="card-title">@Html.DisplayFor(modelItem => item.FName)</h5>
                                <p class="card-text">【@Html.DisplayFor(modelItem => item.FDescription)】《宅配含運》</p>
                                <p class="card-text">NT @Html.DisplayFor(modelItem => item.FPrice)</p>
                                <div class="d-flex">
                                    <button class="btn"><i class="bi bi-heart"></i></button>
                                    <button class="btn @((isSoldOut) ? "disabled" : "")"><i class="bi bi-cart"></i>加入購物車</button>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
            }

        </div>



        <!-- 頁碼 start -->
        <div class="container my-auto">
            <div class="d-flex align-item-end justify-content-center mt-3">

                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-end">
                        <li class="page-item">
                            <a class="page-link" href="#" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        <li class="page-item active"><a class="page-link" href="#">1</a></li>
                        <li class="page-item"><a class="page-link" href="#">2</a></li>
                        <li class="page-item"><a class="page-link" href="#">3</a></li>
                        <li class="page-item">
                            <a class="page-link" href="#" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>

            </div>
        </div>

    </div>
</div>







@section Scripts
{

    <script>

        $(function () {

            // 篩選種類start //
            function submitCategory(button) {
                // 取得按鈕的 data-category 屬性值
                var category = button.getAttribute('data-category');

                // 將選中的 category 值設置到隱藏的輸入框中
                document.getElementById('categoryInput').value = category;

                // 提交表單
                document.forms[0].submit();
            }

            // 停止按鈕的默認提交行為，並用 JavaScript 提交
            $('.imgicon').on('click', function(event) {
                event.preventDefault();  // 阻止表單提交
                submitCategory(this);  // 呼叫 submitCategory
            });




                 // 禁用自動關閉的功能
            const dropdownMenu = document.querySelector('.dropdown-menu');
            const dropdownButton = document.querySelector('#dropdownMenuButton1');

            // 阻止 dropdown 自動關閉
            dropdownButton.addEventListener('click', function (event) {
                event.stopPropagation(); // 阻止點擊後觸發隱藏行為
            
            });

            // 這段代碼會避免點擊區域外的地方關閉下拉選單
            document.addEventListener('click', function (event) {
                if (!dropdownMenu.contains(event.target) && !dropdownButton.contains(event.target)) {
                    dropdownMenu.classList.remove('show'); // 點擊區域外部，隱藏下拉選單
                }
            });




            // 篩選價格start//
            function controlFromInput(fromSlider, fromInput, toInput, controlSlider) {
                const [from, to] = getParsed(fromInput, toInput);
                fillSlider(fromInput, toInput, '#C6C6C6', '#25daa5', controlSlider);
                if (from > to) {
                    fromSlider.value = to;
                    fromInput.value = to;
                } else {
                    fromSlider.value = from;
                }
            }

            function controlToInput(toSlider, fromInput, toInput, controlSlider) {
                const [from, to] = getParsed(fromInput, toInput);
                fillSlider(fromInput, toInput, '#C6C6C6', '#25daa5', controlSlider);
                setToggleAccessible(toInput);
                if (from <= to) {
                    toSlider.value = to;
                    toInput.value = to;
                } else {
                    toInput.value = from;
                }
            }

            function controlFromSlider(fromSlider, toSlider, fromInput) {
                const [from, to] = getParsed(fromSlider, toSlider);
                fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
                if (from > to) {
                    fromSlider.value = to;
                    fromInput.value = to;
                } else {
                    fromInput.value = from;
                }
            }

            function controlToSlider(fromSlider, toSlider, toInput) {
                const [from, to] = getParsed(fromSlider, toSlider);
                fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
                setToggleAccessible(toSlider);
                if (from <= to) {
                    toSlider.value = to;
                    toInput.value = to;
                } else {
                    toInput.value = from;
                    toSlider.value = from;
                }
            }

            function getParsed(currentFrom, currentTo) {
                const from = parseInt(currentFrom.value, 10);
                const to = parseInt(currentTo.value, 10);
                return [from, to];
            }

            function fillSlider(from, to, sliderColor, rangeColor, controlSlider) {
                const rangeDistance = to.max - to.min;
                const fromPosition = from.value - to.min;
                const toPosition = to.value - to.min;
                controlSlider.style.background = `linear-gradient(
                     to right,
                     ${sliderColor} 0%,
                     ${sliderColor} ${(fromPosition) / (rangeDistance) * 100}%,
                     ${rangeColor} ${((fromPosition) / (rangeDistance)) * 100}%,
                     ${rangeColor} ${(toPosition) / (rangeDistance) * 100}%,
                     ${sliderColor} ${(toPosition) / (rangeDistance) * 100}%,
                     ${sliderColor} 100%)`;
            }

            function setToggleAccessible(currentTarget) {
                const toSlider = document.querySelector('#toSlider');
                if (Number(currentTarget.value) <= 0) {
                    toSlider.style.zIndex = 2;
                } else {
                    toSlider.style.zIndex = 0;
                }
            }

            const fromSlider = document.querySelector('#fromSlider');
            const toSlider = document.querySelector('#toSlider');
            const fromInput = document.querySelector('#fromInput');
            const toInput = document.querySelector('#toInput');
            fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
            setToggleAccessible(toSlider);

            fromSlider.oninput = () => controlFromSlider(fromSlider, toSlider, fromInput);
            toSlider.oninput = () => controlToSlider(fromSlider, toSlider, toInput);
            fromInput.oninput = () => controlFromInput(fromSlider, fromInput, toInput, toSlider);
            toInput.oninput = () => controlToInput(toSlider, fromInput, toInput, toSlider);
            // 篩選價格end //




        

        
        
          

        // 點擊 "確定" 按鈕時觸發篩選
        $('#applyFilter').on('click', function () {
                const minPrice = parseInt(fromSlider.value);
        const maxPrice = parseInt(toSlider.value);

        // 假設你有一個表單來提交數據
        $('#minPriceInput').val(minPrice);
        $('#maxPriceInput').val(maxPrice);

        // 提交表單
        $('#filterForm').submit();
        });

        });//end function

    </script>
}


